import express from 'express';
import deleteAccountController from '../controllers/user/deleteAccount.controller';
import isLoggedIn from '../middleware/isLoggedIn.middleware';
import updateNameController from '../controllers/user/updateName.controller';
import { validateRequestInput } from '../middleware/validateRequestInput.middleware';
import { UpdateNameSchema } from '../schemas/user/updateName.schema';
import { UpdateUsernameSchema } from '../schemas/user/updateUsername.schema';
import updateUsernameController from '../controllers/user/updateUsername.controller';
import { UpdatePasswordSchema } from '../schemas/user/updatePassword.schema';
import updatePasswordController from '../controllers/user/updatePassword.controller';
import { UpdateBioSchema } from '../schemas/user/updateBio.schema';
import updateBioController from '../controllers/user/updateBio.controller';
import { CreateNewPostSchema } from '../schemas/user/createNewPost.schema';
import createNewPostController from '../controllers/user/createNewPost.controller';
import { UpdatePostSchema } from '../schemas/user/updatePost.schema';
import updatePostController from '../controllers/user/updatePost.controller';
import getPostsController from '../controllers/user/getPosts.controller';
import likePostController from '../controllers/user/likePost.controller';
import { LikePostSchema } from '../schemas/user/likePost.schema';
import unlikePostController from '../controllers/user/unlikePost.controller';
import { CreateCommentSchema } from '../schemas/user/createComment.schema';
import createCommentController from '../controllers/user/createComment.controller';
import { DeleteCommentSchema } from '../schemas/user/deleteComment.schema';
import deleteCommentController from '../controllers/user/deleteComment.cotroller';
import { DeletePostSchema } from '../schemas/user/deletePost.schema';
import deletePostController from '../controllers/user/deletePost.controller';
import { GetPostCommentsSchema } from '../schemas/user/getPostCommets.schema';
import getPostCommentsController from '../controllers/user/getPostComments.controller';
import { FollowUserSchema } from '../schemas/user/followUser.schema';
import followUserController from '../controllers/user/followUser.controller';
import unfollowUserController from '../controllers/user/unfollowUser.controller';
import getFollowersController from '../controllers/user/getFollowers.controller';

const userRouter = express.Router();

userRouter.post('/delete-account', isLoggedIn, deleteAccountController);
userRouter.patch('/update-name', isLoggedIn, validateRequestInput(UpdateNameSchema), updateNameController);
userRouter.patch('/update-username', isLoggedIn, validateRequestInput(UpdateUsernameSchema), updateUsernameController);
userRouter.patch('/update-password', isLoggedIn, validateRequestInput(UpdatePasswordSchema), updatePasswordController);
userRouter.patch('/update-bio', isLoggedIn, validateRequestInput(UpdateBioSchema), updateBioController);
userRouter.post('/new-post', isLoggedIn, validateRequestInput(CreateNewPostSchema), createNewPostController);
userRouter.patch('/update-post', isLoggedIn, validateRequestInput(UpdatePostSchema), updatePostController);
userRouter.get("/get-posts", isLoggedIn, getPostsController);
userRouter.post('/like-post', isLoggedIn, validateRequestInput(LikePostSchema), likePostController);
userRouter.post('/unlike-post', isLoggedIn, validateRequestInput(LikePostSchema), unlikePostController);
userRouter.post('/create-comment', isLoggedIn, validateRequestInput(CreateCommentSchema), createCommentController);
userRouter.post('/delete-comment', isLoggedIn, validateRequestInput(DeleteCommentSchema), deleteCommentController);
userRouter.post('/delete-post', isLoggedIn, validateRequestInput(DeletePostSchema), deletePostController);
userRouter.get('/get-post-comments', isLoggedIn, validateRequestInput(GetPostCommentsSchema), getPostCommentsController);
userRouter.post('/follow', isLoggedIn, validateRequestInput(FollowUserSchema), followUserController);
userRouter.post('/unfollow', isLoggedIn, validateRequestInput(FollowUserSchema), unfollowUserController);
userRouter.get('/get-followers', isLoggedIn, getFollowersController);

export default userRouter;