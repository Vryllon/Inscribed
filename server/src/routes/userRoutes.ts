import express from 'express';
import deleteAccountController from '../controllers/user/deleteAccountController';
import isLoggedIn from '../middleware/isLoggedIn';
import updateNameController from '../controllers/user/updateNameController';
import { validateRequestInput } from '../middleware/validateRequestInput';
import { UpdateNameSchema } from '../schemas/user/updateNameSchema';
import { UpdateUsernameSchema } from '../schemas/user/updateUsernameSchema';
import updateUsernameController from '../controllers/user/updateUsernameController';
import { UpdatePasswordSchema } from '../schemas/user/updatePasswordSchema';
import updatePasswordController from '../controllers/user/updatePasswordController';
import { UpdateBioSchema } from '../schemas/user/updateBioSchema';
import updateBioController from '../controllers/user/updateBioController';
import { CreateNewPostSchema } from '../schemas/user/createNewPostSchema';
import createNewPostController from '../controllers/user/createNewPostController';
import { UpdatePostSchema } from '../schemas/user/updatePostSchema';
import updatePostController from '../controllers/user/updatePostController';
import getPostsController from '../controllers/user/getPostsController';
import likePostController from '../controllers/user/likePostController';
import { LikePostSchema } from '../schemas/user/likePostSchema';
import unlikePostController from '../controllers/user/unlikePostController';
import { CreateCommentSchema } from '../schemas/user/createCommentSchema';
import createCommentController from '../controllers/user/createCommentController';
import { DeleteCommentSchema } from '../schemas/user/deleteCommentSchema';
import deleteCommentController from '../controllers/user/deleteCommentController';
import { DeletePostSchema } from '../schemas/user/deletePostSchema';
import deletePostController from '../controllers/user/deletePostController';
import { GetPostCommentsSchema } from '../schemas/user/getPostCommetsSchema';
import getPostCommentsController from '../controllers/user/getPostCommentsController';
import { FollowUserSchema } from '../schemas/user/followUserSchema';
import followUserController from '../controllers/user/followUserController';
import unfollowUserController from '../controllers/user/unfollowUserController';
import getFollowersController from '../controllers/user/getFollowersController';
import getUserInfo from '../controllers/user/getUserInfo';

const userRouter = express.Router();

userRouter.post('/delete-account', isLoggedIn, deleteAccountController);
userRouter.patch('/update-name', isLoggedIn, validateRequestInput(UpdateNameSchema), updateNameController);
userRouter.patch('/update-username', isLoggedIn, validateRequestInput(UpdateUsernameSchema), updateUsernameController);
userRouter.patch('/update-password', isLoggedIn, validateRequestInput(UpdatePasswordSchema), updatePasswordController);
userRouter.patch('/update-bio', isLoggedIn, validateRequestInput(UpdateBioSchema), updateBioController);
userRouter.post('/new-post', isLoggedIn, validateRequestInput(CreateNewPostSchema), createNewPostController);
userRouter.patch('/update-post', isLoggedIn, validateRequestInput(UpdatePostSchema), updatePostController);
userRouter.get("/get-posts", isLoggedIn, getPostsController);
userRouter.post('/like-post', isLoggedIn, validateRequestInput(LikePostSchema), likePostController);
userRouter.post('/unlike-post', isLoggedIn, validateRequestInput(LikePostSchema), unlikePostController);
userRouter.post('/create-comment', isLoggedIn, validateRequestInput(CreateCommentSchema), createCommentController);
userRouter.post('/delete-comment', isLoggedIn, validateRequestInput(DeleteCommentSchema), deleteCommentController);
userRouter.post('/delete-post', isLoggedIn, validateRequestInput(DeletePostSchema), deletePostController);
userRouter.get('/get-post-comments', isLoggedIn, validateRequestInput(GetPostCommentsSchema), getPostCommentsController);
userRouter.post('/follow', isLoggedIn, validateRequestInput(FollowUserSchema), followUserController);
userRouter.post('/unfollow', isLoggedIn, validateRequestInput(FollowUserSchema), unfollowUserController);
userRouter.get('/get-followers', isLoggedIn, getFollowersController);
userRouter.get('/get-user-info', isLoggedIn, getUserInfo);

export default userRouter;